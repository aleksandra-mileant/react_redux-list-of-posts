{"version":3,"sources":["store/actions.ts","store/selectors.ts","components/api/api.ts","components/api/comments.ts","components/NewCommentForm/NewCommentForm.tsx","components/PosrDetails/PostDetails.tsx","components/api/posts.ts","components/api/user.ts","components/SelectUser.tsx","components/PostsList/PostsList.tsx","App.tsx","store/index.ts","index.tsx"],"names":["LOAD_POSTS","LOAD_USERS","LOAD_COMMENTS","CHANGE_POST","CHANGE_USER","loadCommentsAction","payload","type","getPostsSelector","state","posts","getPostIdSelector","postId","getUserSelector","users","getUserIdSelector","userId","getCommentsSelector","comments","BASE_URL","getComments","a","fetch","res","json","addComment","name","email","body","method","JSON","stringify","headers","NewCommentForm","loadComments","useState","userName","setUserName","setEmail","setBody","handleChange","event","target","value","Error","handleSubmit","preventDefault","className","onSubmit","placeholder","onChange","PostDetails","isCommentsVisible","setIsCommentsVisible","useSelector","dispatch","useDispatch","loadCommentsFromServer","commentsFromServer","useEffect","handleRemoveComment","id","commentId","find","post","length","onClick","map","comment","getPosts","getUsers","SelectUser","loadUsersFromServer","usersFromServer","user","PostsList","loadPosts","postsFromServer","openPost","postIdd","title","App","initialState","store","createStore","action","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.95e291e1.chunk.js","sourcesContent":["import { Post, User, Comment } from '../react-app-env';\n\nexport const LOAD_POSTS = 'LOAD_POSTS';\nexport const LOAD_USERS = 'LOAD_USER';\nexport const LOAD_COMMENTS = 'LOAD_COMMENTS';\nexport const LOAD_POST = 'LOAD_POST';\nexport const CHANGE_POST = 'CHANGE_POST';\nexport const CHANGE_USER = 'CHANGE_USER';\n\nexport const loadPostsAction = (payload: Post[]) => ({\n  type: LOAD_POSTS,\n  payload,\n});\n\nexport const loadPostAction = (payload: Post[]) => ({\n  type: LOAD_POSTS,\n  payload,\n});\n\nexport const loadUserAction = (payload: User[]) => ({\n  type: LOAD_USERS,\n  payload,\n});\n\nexport const loadCommentsAction = (payload: Comment[]) => ({\n  type: LOAD_COMMENTS,\n  payload,\n});\n\nexport const changePostAction = (payload: number) => ({\n  type: CHANGE_POST,\n  payload,\n});\n\nexport const changeUserIdAction = (payload: number) => ({\n  type: CHANGE_USER,\n  payload,\n});\n\nexport const changePostIdAction = (payload?: number | null) => ({\n  type: CHANGE_USER,\n  payload,\n});\n","import { State } from '../react-app-env';\n\nexport const getPostsSelector = (state: State) => state.posts;\nexport const getPostSelector = (state: State) => state.post;\nexport const getPostIdSelector = (state: State) => state.postId;\nexport const getUserSelector = (state: State) => state.users;\nexport const getUserIdSelector = (state: State) => state.userId;\nexport const getCommentsSelector = (state: State) => state.comments;\n","export const BASE_URL = 'https://mate.academy/students-api';\n","import { BASE_URL } from './api';\n\nexport const getComments = async (postId: number) => {\n  const res = await fetch(`${BASE_URL}/comments?postId=${postId}`);\n\n  return res.json();\n};\n\nexport const deleteComment = (commentId: number) => {\n  return fetch(`${BASE_URL}/comments/${commentId}`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n};\n\nexport const addComment = async (\n  postId: number,\n  name: string,\n  email: string,\n  body: string,\n): Promise<Comment[]> => {\n  const res = await fetch(\n    `${BASE_URL}/comments`,\n    {\n      method: 'POST',\n      body: JSON.stringify({\n        postId,\n        name,\n        email,\n        body,\n      }),\n      headers: {\n        'Content-type': 'application/json; charset=UTF-8',\n      },\n    },\n  );\n\n  return res.json();\n};\n","import React, { useState } from 'react';\nimport { addComment } from '../api/comments';\nimport './NewCommentForm.scss';\n\ntype Props = {\n  postId: number,\n  loadComments: (postId: number) => void,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({ postId, loadComments }) => {\n  const [userName, setUserName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n\n  const handleChange = (\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\n  ) => {\n    const { name, value } = event.target;\n\n    switch (name) {\n      case 'userName':\n        setUserName(value);\n        break;\n      case 'email':\n        setEmail(value);\n        break;\n      case 'body':\n        setBody(value);\n        break;\n      default:\n        throw new Error(`Unknown input name: ${name}`);\n    }\n  };\n\n  const clearForm = () => {\n    setUserName('');\n    setEmail('');\n    setBody('');\n  };\n\n  const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    const newComment = await addComment(\n      postId,\n      userName,\n      email,\n      body,\n    );\n\n    if (newComment) {\n      loadComments(postId);\n    }\n\n    clearForm();\n  };\n\n  return (\n    <form className=\"NewCommentForm\" onSubmit={handleSubmit}>\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"userName\"\n          value={userName}\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          onChange={handleChange}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          value={email}\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          onChange={handleChange}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          value={body}\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          onChange={handleChange}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { loadCommentsAction } from '../../store/actions';\nimport {\n  getCommentsSelector,\n  getPostIdSelector,\n  getPostsSelector,\n} from '../../store/selectors';\n\nimport { deleteComment, getComments } from '../api/comments';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\n\nexport const PostDetails: React.FC = () => {\n  const [isCommentsVisible, setIsCommentsVisible] = useState(false);\n\n  const comments = useSelector(getCommentsSelector);\n  const postId = useSelector(getPostIdSelector);\n  const posts = useSelector(getPostsSelector);\n\n  const dispatch = useDispatch();\n\n  const loadCommentsFromServer = async () => {\n    const commentsFromServer = await getComments(postId);\n\n    dispatch(loadCommentsAction(commentsFromServer));\n  };\n\n  useEffect(() => {\n    loadCommentsFromServer();\n  }, [postId]);\n\n  const handleRemoveComment = async (id: number) => {\n    await deleteComment(id);\n\n    dispatch(loadCommentsAction(await getComments(postId)));\n  };\n\n  const changeCommentsVisibility = () => {\n    setIsCommentsVisible(!isCommentsVisible);\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>\n        Post details:\n      </h2>\n\n      {postId > 0 && (\n        <>\n          <section className=\"PostDetails__post\">\n            <p>{posts.find(post => post.id === postId)?.body}</p>\n          </section>\n\n          <section className=\"PostDetails__comments\">\n            {comments.length === 0\n              ? (\n                <button\n                  type=\"button\"\n                  className=\"button\"\n                >\n                  No comments\n                </button>\n              )\n              : (\n                <button\n                  type=\"button\"\n                  className=\"button\"\n                  onClick={changeCommentsVisibility}\n                >\n                  {isCommentsVisible ? 'Close Comments' : 'Open comments'}\n                </button>\n              )}\n\n            {isCommentsVisible && (\n              <ul className=\"PostDetails__list\">\n                {comments.map(comment => (\n                  <li\n                    className=\"PostDetails__list-item\"\n                    key={comment.id}\n                  >\n                    <button\n                      type=\"button\"\n                      className=\"PostDetails__remove-button button\"\n                      onClick={() => handleRemoveComment(comment.id)}\n                    >\n                      X\n                    </button>\n                    <p>{comment.body}</p>\n                  </li>\n                ))}\n              </ul>\n            )}\n          </section>\n\n          <section>\n            <div className=\"PostDetails__form-wrapper\">\n              <NewCommentForm\n                postId={postId}\n                loadComments={loadCommentsFromServer}\n              />\n            </div>\n          </section>\n        </>\n      )}\n    </div>\n  );\n};\n","// import { Post } from '../../react-app-env';\nimport { Post } from '../../react-app-env';\nimport { BASE_URL } from './api';\n\nexport async function getPosts(userId?: number): Promise<Post[]> {\n  let posts;\n\n  if (userId !== 0) {\n    posts = await fetch(`${BASE_URL}/posts?userId=${userId}`);\n\n    return posts.json();\n  }\n\n  posts = await fetch(`${BASE_URL}/posts`);\n\n  return posts.json();\n}\n\nexport const getPostDetails = async (postId: number) => {\n  const res = await fetch(`${BASE_URL}/posts/${postId}`);\n\n  return res.json();\n};\n","import { BASE_URL } from './api';\n\nexport const getUsers = async () => {\n  const res = await fetch(`${BASE_URL}/users`);\n\n  return res.json();\n};\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { changeUserIdAction, loadUserAction } from '../store/actions';\nimport { getUserIdSelector, getUserSelector } from '../store/selectors';\nimport { getUsers } from './api/user';\n\nexport const SelectUser: React.FC = () => {\n  const dispatch = useDispatch();\n  const users = useSelector(getUserSelector);\n  const userId = useSelector(getUserIdSelector);\n\n  useEffect(() => {\n    const loadUsersFromServer = async () => {\n      const usersFromServer = await getUsers();\n\n      dispatch(loadUserAction(usersFromServer));\n    };\n\n    loadUsersFromServer();\n  }, []);\n\n  return (\n    <select\n      className=\"App__user-selector\"\n      id=\"user-selector\"\n      value={userId}\n      onChange={(event) => {\n        dispatch(changeUserIdAction(+event.target.value));\n      }}\n    >\n      <option value=\"0\">All users</option>\n      {users.map((user) => (\n        <option value={user.id} key={user.id}>{user.name}</option>\n      ))}\n    </select>\n  );\n};\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport {\n  changePostAction,\n  loadPostsAction,\n} from '../../store/actions';\nimport {\n  getPostIdSelector,\n  getPostsSelector,\n  getUserIdSelector,\n} from '../../store/selectors';\n\nimport { getPosts } from '../api/posts';\nimport { SelectUser } from '../SelectUser';\n\nimport './PostsList.scss';\n\nexport const PostsList: React.FC = () => {\n  const userId = useSelector(getUserIdSelector);\n  const postId = useSelector(getPostIdSelector);\n  const posts = useSelector(getPostsSelector);\n\n  const dispatch = useDispatch();\n\n  const loadPosts = async () => {\n    const postsFromServer = await getPosts(userId);\n\n    dispatch(loadPostsAction(postsFromServer));\n  };\n\n  useEffect(() => {\n    loadPosts();\n  }, [userId]);\n\n  const openPost = async (postIdd: number) => {\n    dispatch(changePostAction(postIdd));\n  };\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n      <SelectUser />\n\n      <ul className=\"PostsList__list\">\n        {posts.map(post => (\n          <li className=\"PostsList__item\" key={post.id}>\n            <div>\n              <b>{`[User #${post.userId}]: `}</b>\n              {post.title}\n              {post.body}\n            </div>\n            <button\n              type=\"button\"\n              className=\"PostsList__button button\"\n              onClick={post.id !== postId\n                ? (() => openPost(post.id))\n                : (() => openPost(0))}\n            >\n              {post.id === postId ? 'Hide' : 'Show'}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import './App.scss';\nimport { PostDetails } from './components/PosrDetails/PostDetails';\nimport { PostsList } from './components/PostsList/PostsList';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <h1>Redux list of posts</h1>\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList />\n        </div>\n        <div className=\"App__content\">\n          <PostDetails />\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import { createStore } from 'redux';\nimport { Action, State } from '../react-app-env';\nimport {\n  CHANGE_POST,\n  CHANGE_USER,\n  LOAD_COMMENTS,\n  LOAD_POSTS,\n  LOAD_USERS,\n} from './actions';\n\nconst initialState: State = {\n  posts: [],\n  post: null,\n  user: null,\n  comments: [],\n  users: [],\n  userId: 0,\n  postId: 0,\n};\n\nexport const reducer = (state = initialState, action: Action) => {\n  switch (action.type) {\n    case LOAD_POSTS:\n      return {\n        ...state,\n        posts: [...action.payload],\n      };\n\n    case LOAD_USERS:\n      return {\n        ...state,\n        users: [...action.payload],\n      };\n\n    case LOAD_COMMENTS:\n      return {\n        ...state,\n        comments: [...action.payload],\n      };\n\n    case CHANGE_USER:\n      return {\n        ...state,\n        userId: action.payload,\n      };\n\n    case CHANGE_POST:\n      return {\n        ...state,\n        postId: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst store = createStore(reducer);\n\nexport default store;\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport App from './App';\nimport store from './store';\n\nconst Root = () => (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}